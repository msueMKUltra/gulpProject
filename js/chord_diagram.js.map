{"version":3,"sources":["chord_diagram.js"],"names":["$","queue","defer","d3","json","awaitAll","error","files","show","far","name","$this","d","midAngle","transition","PI","result","selectAll","r","total","degree","fade","opacity","g","i","gInner","filter","source","index","target","style","select","this","parentNode","attr","delay","rColor","section","unit","width","height","dataset","inner","outer","name_map","data_C","space","data_B","nameArray","start","range","key","push","map","code","radius","end","get","rRange","rScale","scaleQuantize","max","domain","interpolate","countArray","Array","length","j","getStart","getEnd","count","p","pScale","pColor","pRange","chord","arc","sortSubgroups","descending","gChord","svg","append","outerRadius","datum","groups","mapIndex","startAngle","level","oPath","gOuter","innerRadius","angle","endAngle","outerPath","data","enter","classed","addOuterText","rotate","location","translate","each","c","ribbon","on","text","value"],"mappings":"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","file":"chord_diagram.js","sourcesContent":["$(function(){\n\n\td3.queue()\n\t\t.defer(d3.json, \"./json/gooee/name_map.json\")\n\t\t.defer(d3.json, \"./json/gooee/data_C.json\")\n\t\t.defer(d3.json, \"./json/gooee/data_B.json\")\n\t\t.awaitAll(chordDiagram);\n\n\tfunction chordDiagram(error, files){\n    \tif (error) throw error;\n\n\t\tvar unit = {width: 1000, height: 1000};\n\t\tvar svg = d3.select('svg')\n\t\t\t\t\t.attr('width', unit.width)\n\t\t\t\t\t.attr('height', unit.height)\n\t\t\t\t\t.style('background-color', 'white');\n\n\t\tvar dataset = [];\n\t\tvar r = {max: 0, inner: 300, outer: 310, section: 4, space: 4};\n\t\tvar total = (r.outer - r.inner + r.space) * r.section + r.inner;\n\t\tr.total = total;\n\t\tvar p = {max: 0, start: 2, section: 4, range: 2};\n\t\tvar name_map = files[0];\n\t\tvar data_C = files[1];\n\t\tvar data_B = files[2];\n\n\t\tvar nameArray = [];\n\t\tvar i = 0;\n\n\t\t//name_map.json\n    \tfor( var key in name_map){\n    \t\tvar name = name_map[key];\n    \t\tdataset.push({\n    \t\t\tcode: key,\n    \t\t\tname: name,\n    \t\t\tindex: i\n    \t\t});\n    \t\tnameArray.push(name);\n    \t\ti++;\n    \t}\n    \t// nameArray.sort((a, b) => d3.ascending(a, b));\n    \t\n    \tvar map = d3.map(dataset, (d) => d.code);\n\n    \t//data_C.json\n\t\tfor( var key in data_C){\n    \t\tvar radius = data_C[key];\n    \t\tvar get = map.get(key);\n    \t\tvar name = get.name;\n    \t\tmap.get(key).radius = radius;\n    \t\tmap.get(key).end = []; // for saving data_B\n    \t\tr.max = radius > r.max ? radius : r.max;\n    \t}\n\t\tvar rRange = d3.range(r.section);\n\t\tvar rScale = d3.scaleQuantize().domain([0, r.max]).range(rRange);\n\t\tvar rColor = d3.interpolate('cornflowerblue', 'mistyrose');\n\n\n\t\t// function nameToIndex(name){\n\t\t// \tvar splitStr = 'N';\n\t\t// \treturn name.split(splitStr)[1] - 1;\n\t\t// }\n\n\t\tvar countArray = new Array(nameArray.length);\n\t\tfor (var i = 0; i < countArray.length;  i++) {\n\t\t\tcountArray[i] = [];\n\t\t\tfor (var j = 0; j < countArray.length;  j++) {\n\t\t\t\tcountArray[i][j] = 0;\n\t\t\t}\n\t\t}\n\n\t\t//data_B.json\n\t\tfor( var key in data_B){\n    \t\tvar start = data_B[key].start, end = data_B[key].end, count = data_B[key].count;\n    \t\tvar getStart = map.get(start), getEnd = map.get(end);\n    \t\t// var index = {start: nameToIndex(getStart.name), end: nameToIndex(getEnd.name)};\n    \t\t// countArray[index.start][index.end] = count;\n    \t\t// countArray[getStart.index][getEnd.index] = count;\n    \t\tcountArray[getEnd.index][getStart.index] = count;\n    \t\tgetStart.end.push({ name: getEnd.name, count: count});\n    \t\tp.max = count > p.max ? count : p.max;\n    \t}\n    \tconsole.log(countArray);\n\t\tvar pRange = d3.range(p.section);\n\t\tvar pScale = d3.scaleQuantize().domain([0, p.max]).range(pRange);\n\t\tvar pColor = d3.interpolate('yellowgreen', 'darkred');\n\n\t\tvar chord = d3.chord()\n\t\t\t\t\t.padAngle(0.03)\n\t\t\t\t\t.sortSubgroups(d3.descending);\n\n\t\tvar arc =  d3.arc()\n\t\t\t\t\t.innerRadius(r.inner)\n\t\t\t\t\t.outerRadius(r.total);\n\n\t\tvar ribbon = d3.ribbon()\n   \t\t\t\t\t.radius(r.inner);\n\n\t\tvar gChord = svg.append('g')\n\t\t\t\t\t\t.attr('transform', 'translate(' + unit.width/2 + ',' + unit.height/2 + ')')\n\t\t\t\t\t\t.datum(chord(countArray));\n\n\t\tvar gOuter = gChord.append('g');\n\t\tvar gInner = gChord.append('g');\n\n\t\tvar mapIndex = d3.map(dataset, (d) => d.index);\n\n\t\tfunction addArc(groups){\n\t\t\tgroups.map(function(d){\n\t\t\t\tvar index = d.index;\n\t\t\t\tvar map = mapIndex.get(index);\n\t\t\t\tvar radius = map.radius;\n\t\t\t\tvar name = map.name;\n\t\t\t\tvar code = map.code;\n\t\t\t\tvar level = rScale(radius)\n\t\t\t\tvar oPath = gOuter.append('g').attr('id', name).attr('data-code', code);\n\t\t\t\tfor(var i = 0; i <=  level; i++){\n\t\t\t\t\tvar angle = [{ startAngle: d.startAngle, endAngle: d.endAngle}];\n\t\t\t\t\tvar width = r.outer - r.inner;\n\t\t\t\t\tvar inner = r.inner + (r.space + width) * i; \n\t\t\t\t\tvar outer = r.outer + (r.space + width) * i;\n\t\t\t\t\tvar arc = d3.arc().innerRadius(inner).outerRadius(outer);\n\t\t\t\t\toPath.append('g')\n\t\t\t\t\t\t\t.selectAll('path')\n\t\t\t\t\t\t\t.data(angle)\n\t\t\t\t\t\t\t.enter()\n\t\t\t\t\t\t\t.append('path')\n\t\t\t\t\t\t\t.classed('levelPath', true)\n\t\t\t\t\t\t\t.attr('d', arc)\n\t\t\t\t\t\t\t.attr('fill', 'none')\n\t\t\t\t\t\t\t.transition()\n\t\t\t\t\t\t\t.delay(200 * (i + 1))\n\t\t\t\t\t\t\t.attr('fill', rColor(i/(r.section - 1)));\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\taddArc(chord(countArray).groups);\n\n\t\tvar outerPath = gOuter.selectAll('.outerPath')\n\t\t\t\t.data((c) => c.groups)\n\t\t\t\t.enter()\n\t\t\t\t.append('g')\n\t\t\t\t.classed('outerPath', true);\n\n\t\touterPath.append('path')\n\t\t\t\t.classed('radiusPath', true)\n\t\t\t\t.style('fill', 'transparent')\n\t\t\t\t.attr('d', arc);\n\n\t\touterPath.append('text')\n\t\t\t\t.classed('nameText', true)\n\t\t\t\t.attr('dy', '.35em')\n\t\t\t\t.each(function(d, i){\n\t\t\t\t\td.midAngle = (d.startAngle + d.endAngle)/2;\n\t\t\t\t\td.name = nameArray[i];\n\t\t\t\t})\n\t\t\t\t.attr('transform', addOuterText(10))\n\t\t\t\t.attr('text-anchor', 'middle')\n\t\t\t\t.text((d) => d.name);\n\n\t\touterPath.append('text')\n\t\t\t\t.classed('codeText', true)\n\t\t\t\t.attr('dy', '.35em')\n\t\t\t\t.each(function(d, i){\n\t\t\t\t\td.midAngle = (d.startAngle + d.endAngle)/2;\n\t\t\t\t\td.name = nameArray[i];\n\t\t\t\t})\n\t\t\t\t.attr('transform', addOuterText(36))\n\t\t\t\t.attr('text-anchor', 'middle')\n\t\t\t\t.text((d, i) => mapIndex.get(i).code)\n\t\t\t\t.attr('opacity', 0);\n\n\t\tfunction addOuterText(far){\n\t\t\treturn function(d){\n\t\t\t\tvar degree = d.midAngle * 180 / Math.PI;\n\t\t\t\t\tvar rotate = 'rotate(' + degree + ')';\n\t\t\t\t\tvar location = -1.0 * (r.total + far); \n\t\t\t\t\tvar translate = 'translate( 0,' + location + ')';\n\t\t\t\t\tvar result = rotate + translate;\n\t\t\t\t\tif(degree > 120 && degree < 240){\n\t\t\t\t\t\tresult += 'rotate(180)';\n\t\t\t\t\t}\n\t\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\n\t\tgInner.selectAll('.innerPath')\n\t\t\t\t.data((c) => c)\n\t\t\t\t.enter()\n\t\t\t\t.append('path')\n\t\t\t\t.classed('innerPath', true)\n\t\t\t\t.attr('fill', (d) => pColor(pScale(d.target.value)/(p.section - 1)))\n\t\t\t\t.attr('d', ribbon)\n\t\t\t\t.attr('stroke', (d) => pColor(pScale(d.target.value)/(p.section - 1)))\n\t\t\t\t.attr('stroke-width', 2)\n\t\t\t\t.attr('opacity', 0.7);\n\n\n\t\tgOuter.selectAll('.radiusPath')\n\t\t\t\t.on('mouseover',fade(0.1, true))\n\t\t\t\t.on('mouseout', fade(0.7, false));\n\n\t\tfunction fade(opacity, show){\n\t\t\treturn function(g, i){\n\t\t\t\tgInner.selectAll('.innerPath')\n\t\t\t\t\t.filter(function(d){\n\t\t\t\t\t\treturn d.source.index != i && d.target.index != i;\n\t\t\t\t\t})\n\t\t\t\t\t.transition()\n\t\t\t\t\t.style('opacity', opacity);\n\t\t\t\tvar $this = d3.select(this.parentNode);\n\t\t\t\tif(show){\n\t\t\t\t\tvar name = g.name;\n\t\t\t\t\t$this.select('.codeText').transition().attr('opacity', 1);\n\t\t\t\t\td3.select('#' + name).selectAll('path').attr('fill', 'none')\n\t\t\t\t\t\t\t\t.transition()\n\t\t\t\t\t\t\t\t.delay((d, i) => (i + 1) * 200)\n\t\t\t\t\t\t\t\t.attr('fill', (d, i) => rColor(i/(r.section - 1)));\n\t\t\t\t}else{\n\t\t\t\t\t$this.select('.codeText').transition().attr('opacity', 0);\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\td3.selectAll('.nameOuter').on('mouseover', null);\n\t}\n});"]}