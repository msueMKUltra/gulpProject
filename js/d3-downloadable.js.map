{"version":3,"sources":["d3-downloadable.js"],"names":["btoa","window","toDataURL","svgText","encodeURIComponent","replace","match","p1","String","fromCharCode","width","height","Promise","resolve","reject","document","context","canvas","getContext","image","onload","initCanvas","WeakMap","self","privates","get","svgDataURL","getCanvas","getSVGDataURL","SVGConverter","_classCallCheck","this","set","dataURL","then","original","_original$getBounding","getBoundingClientRect","svg","cloneNode","setAttributeNS","load","outerHTML","css","createMenu","pos","filename","converter","d3","select","append","classed","selection","style","mouse","loadFromElement","preventDefault","list","downloadableImpl","attr","arguments","length","text","pngDataURL","jpegDataURL","downloadable","empty","on","body","node","event"],"mappings":"6XAAMA,KAAOC,OAAOD,KAEdE,UAAY,SAACC,GACjB,MAAO,2CAA6CH,KAAKI,mBAAmBD,GAASE,QAAQ,kBAAmB,SAACC,EAAOC,GAAR,OAAeC,OAAOC,aAAa,KAAOF,OAHtJP,WAAcA,SAAAA,EAApBU,EAAAC,GAOE,OAAO,IAAIC,QAAQ,SAACC,EAASC,GALzBZ,IAAAA,EAAYa,SAAZb,cAAY,UACTc,EAAAC,EAAAC,WAAA,MAAyGC,EAAsBV,IAAAA,OAAAA,MAAlFQ,EAApDP,MAAAA,EADFO,EAAAN,OAAAA,EAWIQ,EAAMC,OAAS,WAPbC,EAAAA,UAAaF,EAAbE,EAAAA,GACJR,EAAWD,IAETO,EAAMH,IAAAA,KAING,SAAA,IAAeG,QAEbT,cAAA,SAAAU,GACD,OAHDC,SAAAC,IAAAF,GAAAG,YAPJC,UAAA,SAAAJ,GAsBE,OAAOC,SAASC,IAAIF,GAAMN,QALtBW,wBA2BJ,SAAAC,EAAaH,EAAYT,GAAQa,gBAAAC,KAAAF,GAXCL,SAAAQ,IAAAD,MAAAL,WAAAA,EAAAT,OAAAA,2DAf3BO,EAAaD,EAAMG,GAD5B,IAAAO,EAAA/B,UAAAC,GAWI,OAAOkB,WAAWY,EAASvB,EAAOC,GAAQuB,KAAK,SAACjB,GAP9CU,OAAAA,IAAYE,EAAZF,EAAYV,6CAYQkB,GAAU,IAAAC,EACRD,EAASE,wBAA1B3B,EADyB0B,EACzB1B,MAAOC,EADkByB,EAClBzB,OACR2B,EAAMH,EAASI,WAAU,GAJhC,OAKCD,EAAIE,eAAe,KAVRrC,UAUyB,OATpCmC,EAAAE,eAAgBtC,KAAAA,QAAhBQ,GACA4B,EAAAE,eAAOnB,KAAWY,SAAXtB,GACL2B,EAAAE,eAAWX,gCAAX,QAAA,8BACDS,EAFDE,eAAA,gCAAA,cAAA,gCAGDX,EAAAY,KAAAH,EAAAI,UAAAhC,EAAAC,0DAOC2B,OAAIE,cAAeT,2CAIpB,OAAAJ,UAAAI,MAAA7B,UAAA,mDAEgC,OAAAyB,UAAAI,MAAA7B,UAAA,uBAC/ByC,IAAAA,g0BA2FAC,WAAc,SAAAC,EAAAC,EAAAC,GACZC,IAAAA,EAAAA,GAAUC,OACPC,QAGJA,OAAA,MAlCAC,QAAQ,iBAAiB,GAoC1BC,MAAAA,OAAaP,EAAA,GANX,MAOAQ,MAAMR,MAASS,EAAMvC,GAPrB,MAQAc,GAAAA,aAAa0B,WACXX,EAAAA,WAEFI,EAASQ,EALXN,OAAA,MAODO,EAlCEP,OAAO,KAoCVQ,KAAAA,eACEC,KAAIC,WAAUC,EAAc,QAC1BF,KAAA,OAAOb,EAAPpB,cACD+B,EACDX,OAAAA,KACAgB,KAAA,eALFH,KAAA,WAAAb,EAAA,QA5BGa,KAAK,OAAQZ,EAAUgB,cAoC1BN,EA5BFP,OAAA,KALKY,KAAK,eAoCVH,KAAA,WAAAb,EAAA,SACAa,KAAA,OAAAZ,EAAAiB,gBAGAC,aAAA,WAlCE,IAAInB,EAAW,QAETY,EAAmB,SAACN,GACpBJ,GAAGC,OAAO,qBAAqBiB,SACjClB,GAAGC,OAAO,QACPC,OAAO,SACPS,KAAK,KAAM,oBACXG,KAAKnB,KAGVS,EAAUe,GAAG,cAAe,WAC1B,IAAMtB,EAAMG,GAAGM,MAAMvC,SAASqD,MAC9BvC,aAAa0B,gBAAgBH,EAAUiB,QAAQnC,KAAK,SAACa,GACnDH,WAAWC,EAAKC,EAAUC,KAE5BC,GAAGsB,MAAMd,oBAYb,OARAE,EAAiBZ,SAAW,WAC1B,OAAyB,IAArBc,UAAUC,OACLf,GAETA,EAAWc,UAAU,GACdF,IAGFA","file":"d3-downloadable.js","sourcesContent":["const btoa = window.btoa\n\nconst toDataURL = (svgText) => {\n  return 'data:image/svg+xml;charset=utf-8;base64,' + btoa(encodeURIComponent(svgText).replace(/%([0-9A-F]{2})/g, (match, p1) => String.fromCharCode('0x' + p1)))\n}\n\nconst initCanvas = (svgDataURL, width, height) => {\n  return new Promise((resolve, reject) => {\n    const canvas = document.createElement('canvas')\n    const context = canvas.getContext('2d')\n    const image = new window.Image()\n    canvas.width = width\n    canvas.height = height\n    image.onload = () => {\n      context.drawImage(image, 0, 0)\n      resolve(canvas)\n    }\n    image.src = svgDataURL\n  })\n}\n\nconst privates = new WeakMap()\n\nconst getSVGDataURL = (self) => {\n  return privates.get(self).svgDataURL\n}\n\nconst getCanvas = (self) => {\n  return privates.get(self).canvas\n}\n\nclass SVGConverter {\n  static load (svgText, width, height) {\n    const dataURL = toDataURL(svgText)\n    return initCanvas(dataURL, width, height).then((canvas) => {\n      return new SVGConverter(dataURL, canvas)\n    })\n  }\n\n  static loadFromElement (original) {\n    const {width, height} = original.getBoundingClientRect()\n    const svg = original.cloneNode(true)\n    svg.setAttributeNS(null, 'version', '1.1')\n    svg.setAttributeNS(null, 'width', width)\n    svg.setAttributeNS(null, 'height', height)\n    svg.setAttributeNS('http://www.w3.org/2000/xmlns/', 'xmlns', 'http://www.w3.org/2000/svg')\n    svg.setAttributeNS('http://www.w3.org/2000/xmlns/', 'xmlns:xlink', 'http://www.w3.org/1999/xlink')\n    return SVGConverter.load(svg.outerHTML, width, height)\n  }\n\n  constructor (svgDataURL, canvas) {\n    privates.set(this, {\n      svgDataURL,\n      canvas\n    })\n  }\n\n  svgDataURL () {\n    return getSVGDataURL(this)\n  }\n\n  pngDataURL () {\n    return getCanvas(this).toDataURL('image/png')\n  }\n\n  jpegDataURL () {\n    return getCanvas(this).toDataURL('image/jpeg')\n  }\n}\n\n\nconst css = `.download-menu {\n  position: absolute;\n  top: 100%;\n  left: 0;\n  z-index: 1000;\n  display: inline-block;\n  float: left;\n  min-width: 160px;\n  padding: 5px 0;\n  margin: 2px 0 0;\n  list-style: none;\n  font-size: 14px;\n  background-color: #fff;\n  border: 1px solid #ccc;\n  border: 1px solid rgba(0,0,0,.15);\n  border-radius: 4px;\n  -webkit-box-shadow: 0 6px 12px rgba(0,0,0,.175);\n  box-shadow: 0 6px 12px rgba(0,0,0,.175);\n  background-clip: padding-box;\n}\n\n.download-menu>li>a {\n  display: block;\n  padding: 3px 20px;\n  clear: both;\n  font-weight: 400;\n  line-height: 1.42857143;\n  color: #333;\n  white-space: nowrap;\n  text-decoration: none;\n  background: 0 0;\n}\n\n.download-menu>li>a:hover, .download-menu>li>a:focus {\n  text-decoration: none;\n  color: #262626;\n  background-color: #f5f5f5;\n}`\n\nconst createMenu = (pos, filename, converter) => {\n  const menu = d3.select('body')\n    .append('ul')\n    .classed('download-menu', true)\n    .style('left', `${pos[0]}px`)\n    .style('top', `${pos[1]}px`)\n    .on('mouseleave', () => {\n      menu.remove()\n    })\n  const list = menu\n    .append('li')\n  list\n    .append('a')\n    .text('Save as SVG')\n    .attr('download', filename + '.svg')\n    .attr('href', converter.svgDataURL())\n  list\n    .append('a')\n    .text('Save as PNG')\n    .attr('download', filename + '.png')\n    .attr('href', converter.pngDataURL())\n  list\n    .append('a')\n    .text('Save as JPG')\n    .attr('download', filename + '.jpeg')\n    .attr('href', converter.jpegDataURL())\n}\n\nconst downloadable = () => {\n  let filename = 'image'\n\n  const downloadableImpl = (selection) => {\n    if (d3.select('#downloadable-css').empty()) {\n      d3.select('head')\n        .append('style')\n        .attr('id', 'downloadable-css')\n        .text(css)\n    }\n\n    selection.on('contextmenu', () => {\n      const pos = d3.mouse(document.body)\n      SVGConverter.loadFromElement(selection.node()).then((converter) => {\n        createMenu(pos, filename, converter)\n      })\n      d3.event.preventDefault()\n    })\n  }\n\n  downloadableImpl.filename = function () {\n    if (arguments.length === 0) {\n      return filename\n    }\n    filename = arguments[0]\n    return downloadableImpl\n  }\n\n  return downloadableImpl\n}\n\n//這隻檔案是d3-downloadable和svg-dataurl合併的\n//因為會出現require的問題\n//需要在nodejs下執行\n//所以拿掉import和exprot相關的程式碼\n//直接在html裡script src這隻檔案\n\n"]}