{"version":3,"sources":["pie_chart.js"],"names":["$","d3","queue","defer","json","awaitAll","error","files","name_map","data_C","dataset","code","key","name","map","d","i","get","count","plot","width","height","svg","select","append","attr","arcs","value","sort","a","b","localeCompare","sortValues","startAngle","Math","PI","padAngle","arc","innerRadius","radius","inner","endAngle","outer","color","schemeCategory20c","g","selectAll","data","enter","centroid","sum","toFixed","percent","text","rotate"],"mappings":"aAAAA,EAAE,WACDC,GAAGC,QADFC,MAAAF,GAAAG,KAAU,+BACXH,MAAGC,GAAHE,KAAA,6BAGCC,SAGA,SAAgBC,EAANC,GACV,GAAAD,EAAIE,MAAWD,EACf,IAAIE,EAASF,EAAb,GACIG,EAAAA,EAAJ,GAAIA,KAGHA,IAAAA,IAAAA,KAAaF,EACZG,EAAMC,MACNC,KAAML,EAFPK,KAAAL,EAAAI,KAMyB,IAAAE,EAAYH,GAAAA,IAAZD,EAAA,SAAAK,EAAAC,GAAA,OAAAD,EAAAJ,OAE1B,IAAI,IAAIC,KAAOH,EAAfK,EAAIG,IAAIL,GAARM,MAAAT,EAAsBG,GAItB,IAAIO,GAASC,MAAO,IAAKC,OAAQ,KAA7BF,GAASC,MAAO,GAAKC,MAAQ,KAG7BC,EAAMrB,GAAGsB,OAAO,QAAQC,OAAO,OAA/BF,KAAAA,QAASC,EAAOH,OAEhBK,KAAK,SAAUN,EAAKE,QAGdK,EAASR,GAAAA,MAAOS,MAAA,SAAAZ,GAAA,OAAAA,EAAAG,QACtBU,KAAK,SAAAC,EAAAC,GAAe,OAAAD,EAAAhB,KAAAkB,cAAAD,EAAAjB,QAAEmB,WAAcD,SAAAA,EAAAA,GAAAA,OAAAA,EAAcD,IAAYG,WAAA,WAAA,OAAA,IAC9DD,SAAW,WAAA,OAAA,EAAAE,KAAAC,KAAAC,SAAA,WAAA,MAAA,KAFIlB,CAEaR,GACjB2B,EAAApC,GAAAoC,MAASC,YAAAC,EAAAC,OACpBC,YAASF,EAAAG,OAAmBC,EAAA1C,GAAA2C,kBACnBC,EAAMvB,EAANwB,UAAA,KAAAC,KAAArB,GAAAsB,QAAAxB,OAAA,KAAAC,KAAA,YAAA,aAAAN,EAAAC,MAAA,EAAA,IAAAD,EAAAE,OAAA,EAAA,KANFwB,EAOPnC,OAPJ,QAkBEe,KAAK,IAAK,SAACV,GAAD,OAAOsB,EAAItB,KATvBU,KAAIY,OAASA,SAAHtB,EACNuB,GADSD,OACTC,EAAYC,KAGhBM,EAAArB,OAAImB,QASFlB,KAAK,IAAK,SAACV,GAAD,OAA4B,IAArBsB,EAAIY,SAASlC,GAAG,KAPnCU,KAAIoB,IAAQC,SAAAA,GAAAA,OAA0BE,IAA1BF,EAAUG,SAAUvB,GAAAA,KAS9BD,KAAK,cAAe,UAPpBD,KAAAA,SAAFT,GAAA,OACYA,EAAAY,MACL1B,GAFPiD,IAEexB,EAAA,SAACX,GAAD,OAAAA,EAAAY,QAAA,KAAqBwB,QAAA,GAAA,MAGxBN,EAAArB,OAAOa,QADnBZ,KAC6C,KAAA,SAAAV,GAAA,OAAA,EAAAsB,EAAAY,SAAAlC,GAAA,KAC3CU,KAAK,KAAK,SAAAV,GAAA,OAAA,EAAAsB,EAAAY,SAAAlC,GAAA,KAAAU,KAAA,KAAWwB,SAAAA,GAAAA,OAAX,IAAOZ,EAAgBY,SAAvBlC,GAAA,KAFZU,KAE6C,KAAA,SAAAV,GAAA,OAAA,IAAAsB,EAAAY,SAAAlC,GAAA,KAC3CU,KAAK,SAAA,aAGLoB,EAAArB,OAAI0B,QACJzB,KAAI2B,cAAUzB,UACd0B,KAAOD,SAAAA,GAAAA,OAAAA,EAAAA,KAAQD,OARjB1B,KAAA,YAAA,SAAAV,GAwBE,IAZWuC,EAAWL,WAYNlC,EAAEkB,WAAalB,EAAE0B,UAAY,EAb/C,IACaP,KAAAC,GAAA,IACXV,MAD0C,aAAA,IAAAY,EAAAY,SAAAlC,GAAA,GAAA,IAAA,IAAAsB,EAAAY,SAAAlC,GAAA,GAAA,IAC/BuC","file":"pie_chart.js","sourcesContent":["$(function(){\t\t\t\t\t\n\td3.queue()\n\t.defer(d3.json, \"./files/gooee/name_map.json\")\n\t.defer(d3.json, \"./files/gooee/data_C.json\")\n\t.awaitAll(pieChart);\n\n\tfunction pieChart(error, files){\n\t\tif(error) throw error;\n\t\tvar name_map = files[0];\n\t\tvar data_C = files[1];\n\t\tvar dataset = [];\n\n\t\tfor(var key in name_map){\n\t\t\tdataset.push({\n\t\t\t\tcode: key,\n\t\t\t\tname: name_map[key]\n\t\t\t});\n\t\t}\n\n\t\tvar map = d3.map(dataset, (d, i) => d.code);\n\n\t\tfor(var key in data_C){\n\t\t\tmap.get(key).count = data_C[key];\n\t\t}\n\n\t\tvar plot = { width: 700, height: 700};\n\t\tvar radius = { inner: 10, outer: 180};\n\n\t\tvar svg = d3.select('body').append('svg')\n\t\t\t\t\t.attr('width', plot.width)\n\t\t\t\t\t.attr('height', plot.height);\n\n\t\tvar arcs = d3.pie()\n\t\t\t\t\t.value((d) => d.count) // 設定value為dataset裡的什麼值，不加則dataset必須為資料的陣列\n\t\t\t\t\t.sort(function(a, b) { return a.name.localeCompare(b.name); }) // 由dataset裡的某值做排序，不加則startAngle的順序會依value大到小排列\n\t\t\t\t\t.sortValues((a, b) => a - b) // 依values的大小排列，與上行可擇一撰寫\n\t\t\t\t\t.startAngle(() => 0) // 設定起始的角度，預設為0\n\t\t\t\t\t.endAngle(() => 2 * Math.PI) // 設定終止的角度，預設為2π\n\t\t\t\t\t.padAngle(() => 0.03) // 設定arc之間的空隙，預設為0 (you can google \"pie padding animation\" for Mike's work)\n\t\t\t\t\t(dataset);\n\n\t\tvar arc = d3.arc()\n\t\t\t\t\t.innerRadius(radius.inner)\n\t\t\t\t\t.outerRadius(radius.outer);\n\n\t\tvar color = d3.schemeCategory20c; // google Colours (v4) for color category & other\n\n\t\tvar g = svg.selectAll('g').data(arcs).enter().append('g').attr('transform', 'translate(' + plot.width/2 + ',' + plot.height/2 + ')');\n\n\t\tg.append('path')\n\t\t\t.attr('d', (d) => arc(d))\n\t\t\t.attr('fill', (d, i) => color[i]); // 有20種color，用陣列方式讀取，index超過19會變黑色\n\n\t\tg.append('text')\n\t\t\t.attr('x', (d) => arc.centroid(d)[0] * 1.4) // 可以乘上數字0~2(圓心到圓周)\n\t\t\t.attr('y', (d) => arc.centroid(d)[1] * 1.4) // 可以乘上數字0~2(圓心到圓周)\n\t\t\t.attr('text-anchor', 'middle')\n\t\t\t.text((d) => {\n\t\t\t\tvar value = d.value;\n\t\t\t\tvar sum = d3.sum(arcs, (d) => d.value); // d3累加函數 (very good)\n\t\t\t\tvar percent = value / sum * 100;\n\t\t\t\treturn percent.toFixed(2) + '%'; // toFixed 可以設定要到小數點幾位 (also very good)\n\t\t\t});\n\n\t\tg.append('line')\n\t\t\t.attr('x1', (d) => arc.centroid(d)[0] * 2) // 可以乘上數字0~2(圓心到圓周)\n\t\t\t.attr('y1', (d) => arc.centroid(d)[1] * 2) // 可以乘上數字0~2(圓心到圓周)\n\t\t\t.attr('x2', (d) => arc.centroid(d)[0] * 2.3) // 可以乘上數字0~2(圓心到圓周)\n\t\t\t.attr('y2', (d) => arc.centroid(d)[1] * 2.3) // 可以乘上數字0~2(圓心到圓周)\n\t\t\t.attr('stroke', 'slategray');\n\n\t\tg.append('text')\n\t\t\t// .attr('x', (d) => arc.centroid(d)[0] * 2.5) // 可以乘上數字0~2(圓心到圓周)\n\t\t\t// .attr('y', (d) => arc.centroid(d)[1] * 2.5) // 可以乘上數字0~2(圓心到圓周)\n\t\t\t.attr('text-anchor', 'middle')\n\t\t\t.text( d => d.data.name)\n\t\t\t.attr('transform', d => {\n\t\t\t\tvar midAngle = (d.startAngle + d.endAngle) / 2;\n\t\t\t\tvar degree = midAngle * 180 / Math.PI;\n\t\t\t\tvar rotate = 'rotate(' + degree + ')';\n\t\t\t\tvar translate = 'translate(' + arc.centroid(d)[0] * 2.4 + ',' + arc.centroid(d)[1] * 2.4 + ')';\n\t\t\t\treturn translate + rotate; // *重要(有順序性) : 要先translate再rotate，否則會歪掉\n\t\t\t});\n\n\t\tconsole.log(arcs);\n\t}\n});"]}