{"version":3,"sources":["force_directed.js"],"names":["$","d3","queue","defer","json","awaitAll","error","files","svg","height","append","select","attr","plot","width","data_B","edges","nodes","push","name_map","code","name","index","length","map","d","i","start","end","count","source","get","target","charge","forceManyBody","strength","link","forceLink","simulation","forceSimulation","force","center","lines","x","y","circles","texts","color","schemeCategory20b","data","classed","selectAll","ticked","enter","drag","event","active","alphaTarget","restart","console","log","fx","fy","dragEnded","style","this","call"],"mappings":"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","file":"force_directed.js","sourcesContent":["$(function(){\t\t\t\t\t\n\td3.queue()\n\t.defer(d3.json, \"./files/gooee/name_map.json\")\n\t.defer(d3.json, \"./files/gooee/data_B.json\")\n\t.awaitAll(forceDirected);\n\n\tfunction forceDirected(error, files){\n\t\tif(error) throw error;\n\n\t\tvar plot = {width: 500, height: 500};\n\t\tvar svg = d3.select('body').append('svg').attr('width', plot.width).attr('height', plot.height);\n\n\t\tvar name_map = files[0];\n\t\tvar data_B = files[1];\n\n\t\tvar nodes = [];\n\t\tvar edges = [];\n\n\t\tfor(var key in name_map){\n\t\t\tnodes.push({\n\t\t\t\tcode: key,\n\t\t\t\tname: name_map[key],\n\t\t\t\tindex: nodes.length // 利用length來設定index，表示用在edges的node序號\n\t\t\t});\n\t\t}\n\n\t\tvar map = d3.map(nodes, (d) => d.code);\n\n\t\tfor(var i = 0; i < data_B.length ; i++){\n\t\t\tvar start = data_B[i].start;\n\t\t\tvar end = data_B[i].end;\n\t\t\tvar count = data_B[i].count;\n\t\t\tvar source = map.get(start).index;\n\t\t\tvar target = map.get(end).index;\n\n\t\t\t// edges的陣列，物件預設source、target來表示nodes的序號\n\t\t\tedges.push({\n\t\t\t\tsource: source, target: target, count: count\n\t\t\t})\n\t\t}\n\n\t\tvar charge = d3.forceManyBody().strength(-1000);\n\t\tvar center = d3.forceCenter(plot.width / 2, plot.height / 2);\n\n\t\tvar link = d3.forceLink(edges);\n\t\t\t\t\t// .id((d) => d.name); // 如果 edges 的 source & target 是用node的name來設定的話\n\n\t\tvar simulation = d3.forceSimulation(nodes)\n\t\t\t\t\t\t\t.force('charge', charge)\n\t\t\t\t\t\t\t.force('center', center)\n\t\t\t\t\t\t\t.force('links', link);\n\n\t\t// simulation.nodes(nodes); // d3.forceSimulation(nodes) -> 括號的nodes沒加，則要加這行把資料抓進來\n\t\t// simulation.force('links').links(edges); // d3.forceLink(edges) -> 括號的edges沒加，則要加這行把資料抓進來\n\n\t\tsimulation.on('tick', ticked);\n\n\t\tvar lines = svg.selectAll('.forceLine')\n\t\t\t\t\t\t.data(edges)\n\t\t\t\t\t\t.enter()\n\t\t\t\t\t\t.append('line')\n\t\t\t\t\t\t.classed('forceLine', true)\n\t\t\t\t\t\t.attr('stroke', 'slategray');\n\n\t\tvar color = d3.schemeCategory20b;\n\n\t\tvar circles = svg.selectAll('.forceCircle')\n\t\t\t\t\t\t\t.data(nodes)\n\t\t\t\t\t\t\t.enter()\n\t\t\t\t\t\t\t.append('circle')\n\t\t\t\t\t\t\t.attr('class', 'forceCircle')\n\t\t\t\t\t\t\t.attr('r', 20)\n\t\t\t\t\t\t\t.style('fill', (d, i) => color[i]);\n\n\t\tvar texts = svg.selectAll('.forceText')\n\t\t\t\t\t\t\t.data(nodes)\n\t\t\t\t\t\t\t.enter()\n\t\t\t\t\t\t\t.append('text')\n\t\t\t\t\t\t\t.attr('class', 'forceText')\n\t\t\t\t\t\t\t.style('fill', 'ivory')\n\t\t\t\t\t\t\t.attr('text-anchor', 'middle')\n\t\t\t\t\t\t\t.attr('dy', '.35rem')\n\t\t\t\t\t\t\t.text( d => d.name);\n\n\t\tfunction ticked(){\n\t\t\tlines.attr(\"x1\", d => d.source.x)\n\t\t\t\t.attr(\"y1\", d => d.source.y)\n\t\t\t\t.attr(\"x2\", d => d.target.x)\n\t\t\t\t.attr(\"y2\", d => d.target.y);\n\t\t\tcircles.attr('cx', d => d.x)\n\t\t\t\t.attr('cy', d => d.y);\n\t\t\ttexts.attr('x', d => d.x)\n\t\t\t\t.attr('y', d => d.y);\n\t\t}\n\n\t\t// setTimeout(function(){\n\t\t// \tsimulation.stop(); // 讓圖靜止\n\t\t// }, 200);\n\n\t\t// setTimeout(function(){\n\t\t// \tsimulation.restart(); // 圖的引力恢復\n\t\t// }, 2000);\n\n\t\tvar drag = d3.drag()\n\t\t\t\t\t\t.on('start', dragStarted)\n\t\t\t\t\t\t.on('drag', dragged)\n\t\t\t\t\t\t.on('end', dragEnded);\n\n\t\tfunction dragStarted(d){\n\t\t\t// d3.event 為當前觸發的事件，active => 0為尚未執行，1為執行中\n\t\t\tconsole.log(d3.event.active); // 0 \n\t\t\tif(!d3.event.active) simulation.alphaTarget(0.3).restart();\n\n\t\t\tcircles.each(d => {\n\t\t\t\td.fx = null; // 用來移動時，將每個點預設為原本會動狀態\n \t\t\t\td.fy = null; // 用來移動時，將每個點預設為原本會動狀態\n\t\t\t});\n\n\t\t\td.fx = d.x; // 開始時，設定移動點的位置為當前位置\n        \td.fy = d.y; // 開始時，設定移動點的位置為當前位置\n\t\t}\n\t\tfunction dragged(d){\n\t\t\tconsole.log(d3.event.active); // 1\n\t\t\td3.select(this).style('fill', 'gold');\n\t\t\td.fx = d3.event.x; // 拖曳時，設定移動點的位置為滑鼠的位置\n        \td.fy = d3.event.y; // 拖曳時，設定移動點的位置為滑鼠的位置\n\t\t}\n\t\tfunction dragEnded(d, i){\n\t\t\tconsole.log(d3.event.active); // 0\n\t\t\tif(!d3.event.active) simulation.alphaTarget(0);\n\t\t\td3.select(this).style('fill', color[i]);\n\t\t\t// d.fx = null; // 結束時，設為null，則會恢復成預設狀態\n \t\t\t// d.fy = null; // 結束時，設為null，則會恢復成預設狀態\n\t\t}\n\n\t\tcircles.call(drag);\n\n\t\tconsole.log(nodes);\n\t\tconsole.log(edges);\n\n\t}\n});"]}