{"version":3,"sources":["gooee.js"],"names":["$","queue","defer","d3","json","gooee","error","awaitAll","width","files","svg","select","dataset","height","xyScale","scaleLinear","r","max","p","start","name_map","location","data_B","domain","range","section","key","id","name","map","push","cy","d","get","cx","data_C","end","radius","rRange","rScale","scaleQuantize","getEnd","count","getStart","lines","pRange","y","cScale","console","g","selectAll","on","this","parentNode","raise","classed","attr","$g","event","x","dragStarted","dragged","invert","linePath","keys","enter","append","i","length","line","curve","curveCardinal","data","color","pScale","circle","drag","text"],"mappings":"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","file":"gooee.js","sourcesContent":["$(function(){\n\n\td3.queue()\n\t\t.defer(d3.json, \"./json/gooee/name_map.json\")\n\t\t.defer(d3.json, \"./json/gooee/location.json\")\n\t\t.defer(d3.json, \"./json/gooee/data_C.json\")\n\t\t.defer(d3.json, \"./json/gooee/data_B.json\")\n\t\t.awaitAll(gooee);\n\n\tfunction gooee(error, files){\n    \tif (error) throw error;\n\n\t\tvar unit = {width: 1000, height: 1000};\n\t\tvar svg = d3.select('.box')\n\t\t\t\t\t.append('svg')\n\t\t\t\t\t.attr('width', unit.width)\n\t\t\t\t\t.attr('height', unit.height)\n\t\t\t\t\t.style('border', '1px solid slateblue');\n\n\t\tvar dataset = [];\n\t\tvar xyScale = d3.scaleLinear().domain([0, 100]).range([0, 1000]);\n\t\tvar r = {max: 0, start: 4, section: 4, range: 6};\n\t\tvar p = {max: 0, start: 2, section: 4, range: 2};\n\t\tvar name_map = files[0];\n\t\tvar location = files[1];\n\t\tvar data_C = files[2];\n\t\tvar data_B = files[3];\n\n\t\t//name_map.json\n    \tfor( var key in name_map){\n    \t\tvar name = name_map[key];\n    \t\tdataset.push({\n    \t\t\tid: key,\n    \t\t\tname: name\n    \t\t});\n    \t\t// svg.append('g').attr('data-id', key).attr('id', name);\n    \t}\n    \tvar map = d3.map(dataset, (d) => d.id);\n\n    \t//location.json\n\t\tfor( var key in location){\n    \t\tvar cx = location[key][0];\n    \t\tvar cy = location[key][1];\n    \t\tvar get = map.get(key);\n    \t\tvar name = get.name;\n    \t\tget.location = {cx: cx, cy: cy};\n    \t\t// d3.select('#' + name).append('circle').attr('cx', xyScale(cx)).attr('cy', xyScale(cy));\n    \t}\n    \t\n    \t//data_C.json\n\t\tfor( var key in data_C){\n    \t\tvar radius = data_C[key];\n    \t\tvar get = map.get(key);\n    \t\tvar name = get.name;\n    \t\tmap.get(key).radius = radius;\n    \t\tmap.get(key).end = []; // for saving data_B  \t\t\n    \t\t// d3.select('#' + name).select('circle').attr('r', radius/100);\n    \t\tr.max = radius > r.max ? radius : r.max;\n    \t}\n\t\tvar rRange = d3.range(r.start, r.start + r.section * r.range, r.range);\n\t\tvar rScale = d3.scaleQuantize().domain([0, r.max]).range(rRange);\n\n\t\t//data_B.json\n\t\tfor( var key in data_B){\n    \t\tvar start = data_B[key].start, end = data_B[key].end, count = data_B[key].count;\n    \t\tvar getStart = map.get(start), getEnd = map.get(end);\n    \t\tvar id = getEnd.name;\n    \t\tvar cx = getEnd.location.cx;\n    \t\tvar cy = getEnd.location.cy;\n    \t\tgetStart.end.push({ lines: [[getStart.location.cx, getStart.location.cy], [cx, cy]], count: count, id: id});\n    \t\tp.max = count > p.max ? count : p.max;\n    \t}\n\t\tvar pRange = d3.range(p.start, p.start + p.section * p.range, p.range);\n\t\tvar pScale = d3.scaleQuantize().domain([0, p.max]).range(pRange);\n\t\tvar cScale = d3.scaleQuantize().domain([0, p.max]).range(d3.range(p.section));\n\t\tconsole.log(cScale.domain());\n\t\tconsole.log(cScale.range());\n\t\tvar color = d3.interpolate('yellowgreen', 'darkred');\n\t\tconsole.log(color(1/2));\n\t\tconsole.log(dataset);\n\n\t\tvar drag = d3.drag()\n\t\t    .on(\"start\", dragStarted)\n\t\t    .on(\"drag\", dragged)\n\t\t    .on(\"end\", dragEnded);\n\n\t\tvar g = svg.selectAll('g')\n\t\t\t\t\t.data(dataset)\n\t\t\t\t\t.enter()\n\t\t\t\t\t.append('g')\n\t\t\t\t\t.attr('data-code', (d) => d.id)\n\t\t\t\t\t.attr('id', (d) => d.name);\n\n\t\tvar keys = map.keys();\n\t\tfor(var i = 0; i < keys.length; i++){\n\t\t\tvar get = map.get(keys[i]);\n\t\t\tvar lines = get.end;\n\t\t\tvar id = get.name;\n\t\t\tvar linePath = d3.line().curve(d3.curveCardinal).x((d) => xyScale(d[0])).y((d) => xyScale(d[1]));\n\t\t\t// console.log(id);\n\t\t\t// console.log(lines);\n\t\t\tvar $id = d3.select('#' + id);\n\t\t\t\n\t\t\t$id.selectAll('path')\n\t\t\t\t.data(lines)\n\t\t\t\t.enter()\n\t\t\t\t.append('path')\n\t\t\t\t.attr('class', (d) => d.id)\n\t\t\t\t.attr('d', (d) => linePath(d.lines))\n\t\t\t\t.attr('stroke', (d) => color(cScale(d.count)/(p.section - 1)))\n\t\t\t\t.attr('stroke-width', (d) => pScale(d.count));\n\t\t}\n\n\t\tvar circle = g.append('circle')\n\t\t\t\t\t\t.attr('cx', (d) => xyScale(d.location.cx))\n\t\t\t\t\t\t.attr('cy', (d) => xyScale(d.location.cy))\n\t\t\t    \t\t.attr('r', (d) => rScale(d.radius))\n\t\t\t    \t\t.call(drag);\n\t\tvar text = g.append('text')\n\t\t\t\t\t\t.attr('x', (d) => xyScale(d.location.cx) + rScale(d.radius))\n\t\t\t\t\t\t.attr('y', (d) => xyScale(d.location.cy) - rScale(d.radius))\n\t\t\t    \t\t// .attr('text-anchor', 'start')\n\t\t\t    \t\t.text( (d) => d.name);\n\t\tcircle.on('mouseover', function(){\n\t\t\td3.select(this.parentNode).select('text').text( (d) => d.name + ' (' + d.id + ')');\n\t\t});\n\t\tcircle.on('mouseout', function(){\n\t\t\td3.select(this.parentNode).select('text').text( (d) => d.name);\n\t\t});\n\n\n\t\tfunction dragStarted(d){\n\t\t\td3.select(this.parentNode).raise().classed(\"active\", true);\n\t\t}\n\t\tfunction dragged(d){\n\t\t\tvar $g = d3.select(this.parentNode)\n\t\t\tvar id = $g.attr('id');\n\t\t\td3.select(this)\n\t\t\t\t.attr(\"cx\", d3.event.x)\n\t\t\t    .attr(\"cy\", d3.event.y);\n\t\t\t$g.select('text')\n\t\t\t\t.attr(\"x\", (d) => d3.event.x + rScale(d.radius))\n\t\t\t    .attr(\"y\",(d) => d3.event.y - rScale(d.radius));\n\t\t\t$g.selectAll('path')\n\t\t\t\t.attr('d', function(d){\n\t\t\t\t\t\t\t\td.lines[0][0] = xyScale.invert(d3.event.x);\n\t\t\t\t\t\t\t\td.lines[0][1] = xyScale.invert(d3.event.y);\n\t\t\t\t\t\t\t\treturn linePath(d.lines);\n\t\t\t\t\t\t\t});\n\t\t\td3.selectAll('.' + id)\n\t\t\t\t.attr('d', function(d){\n\t\t\t\t\t\t\t\td.lines[1][0] = xyScale.invert(d3.event.x);\n\t\t\t\t\t\t\t\td.lines[1][1] = xyScale.invert(d3.event.y);\n\t\t\t\t\t\t\t\treturn linePath(d.lines);\n\t\t\t\t\t\t\t});\n\t\t}\n\t\tfunction dragEnded(d){\n\t\t\td3.select(this).classed(\"active\", false);\n\t\t}\n\t\t\n\t\td3.select('#N8').select('circle').attr('fill', 'coral');\n\t}\n});"]}